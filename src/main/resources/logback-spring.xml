<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">

<!-- 	<property name="LOG_DIR" value="${user.dir}/logs/app" /> -->
	<property name="LOG_DIR" value="D:/kyobo/logs/app" />
	
    <!-- property :: LOG_PREFIX  -->
    <springProperty scope="context" name="LOG_PREFIX" source="spring.application.name" />

	<!-- Console log Appender.-->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                [${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%thread] [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    
    <!-- File log Appender. -->
    <appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/kyobo.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                [${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/kyobo/kyobo.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>
    
    <appender name="RollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/kyobo-rolling.log</file>
		<append>true</append>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_DIR}/archived/kyobo.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>50MB</maxFileSize><!-- 로그 파일이 50MB 넘어가면 롤링 -->
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory><!-- 30일간의 이력 보관 -->
		</rollingPolicy>
		<encoder>
			<pattern>[${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
    
    <!-- File log Rolling Appender-->
<!--     <appender name="RollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender"> -->
<!--         <file>${LOG_DIR}/kyobo-rolling.log</file> -->
<!--         <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> -->
<!--             <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n</Pattern> -->
<!--             <charset>UTF-8</charset> -->
<!--         </encoder> -->
        
        <!-- 10MB가 넘어가면 새로운 압축파일이 생성 -->
<!--         <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> -->
<!--             <MaxFileSize>1MB</MaxFileSize> -->
<!--         </triggeringPolicy> -->

        <!-- 파일을 덮어쓰는 정책 -->
<!--         <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> -->
<!--             <FileNamePattern>${LOG_DIR}/archived/kyobo.%i.log.zip</FileNamePattern> -->
            <!--
                10MB단위로 로그 압축 파일이 생성된다. (1 ~ 10)
                10개가 넘어가면 오래된순으로 덮어쓰기 됩니다.
            -->
<!--             <MinIndex>1</MinIndex> -->
<!--             <MaxIndex>10</MaxIndex> -->
<!--         </rollingPolicy> -->
<!--     </appender> -->
    
    <!-- Error File Log --> 
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_DIR}/kyobo-error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                [${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/kyobo/kyobo-error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>


	<!--
        org.springframework.web 패키지 아래에서 발생하는 INFO 레벨 로그를 Console, File에 남깁니다. 
        root의 속성을 상속받지 않습니다.
    -->
    <logger name="org.springframework.web" level="INFO" />
    <logger name="org.apache.ibatis" level="DEBUG" />
    <logger name="org.thymeleaf" level="ERROR" additivity="false" />
    
    <!-- Log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF"/>
	<!-- SQL문 만을 로그로 남긴다, PreparedStatement일 경우 관련된 argument 값으로 대체된 값으로 SQL 문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF"/>
	<!-- SQL문과 해당 SQL을 싱행시키는데 수행된 시간정보(millseconds)를 포함한다 -->
	<logger name="jdbc.sqltiming" level="DEBUG">
		<appender-ref ref="Console"/>
	</logger>
	<!-- mongodb java driver log level 설정 -->
	<logger name="org.mongodb.driver" level="INFO">
        <appender-ref ref="Console"/>
    </logger>
	<!--
		ResultSet 을 제외한 모든 JDBC 호출 정보를 로그로 남김, 방대한 양의 로그가 쌓임
		JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고 사용을 권장하지 않음 
	 -->
	<logger name="jdbc.audit" level="OFF"/>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그에 남김, 방대한 양의 로그가 쌓임 -->
	<logger name="jdbc.resultset" level="OFF"/>
	<!-- SQL 조회된 데이터를 TABLE 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="DEBUG">
		<appender-ref ref="Console"/>
	</logger>
	<!-- 커넥션 open, close 이벤트 로그를 남긴다. -->
	<logger name="jdbc.connection" level="OFF"/>
    
    <!-- profile 설정이 local 일때 -->
    <springProfile name="local">
	    <root level="DEBUG">
	    	<appender-ref ref="Console"/>
	    </root>
    </springProfile>
    
    <!-- profile 설정이 dev 일때 -->
    <springProfile name="dev">
	    <root level="INFO">
	    	<appender-ref ref="Console"/>
	    </root>
    </springProfile>
    
    <!-- profile 설정이 local 이나 dev 가 아닐경우 운영 환경 -->
    <springProfile name="!local,dev">
	    <root level="ERROR">
	    	<appender-ref ref="Console"/>
	    </root>
    </springProfile>
</configuration>